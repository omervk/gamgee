/* This file is automatically generated. It gets overwritten on build */
import {CompleteWorkflow, WrongTimingError, WorkflowBase} from "@gamgee/run";
import {StateStore} from "@gamgee/interfaces/store";
import {WorkflowTask} from "@gamgee/interfaces/task";

import {CountDownPayload} from "./recursion";

export abstract class RecursionWorkflowBase extends WorkflowBase {
    protected constructor() {
        super('RecursionWorkflow');

        super._registerStep({ name: 'countDown', run: this.countDown, attempts: 1, backoffMs: 1000 });
    }

    async submit(payload: CountDownPayload, store: StateStore, uniqueInstanceId?: string): Promise<string> {
        const task = await super._enqueue('countDown', payload, store, uniqueInstanceId);
        return task.instanceId;
    }

    abstract countDown(payload: CountDownPayload): Promise<ReturnType<(typeof this.decision)['zero']>> | Promise<ReturnType<(typeof this.decision)['nonZero']>>;

    protected decision = {
        zero() {
            return CompleteWorkflow;
        },
        nonZero(payload: CountDownPayload) {
            return {
                targetTaskName: 'countDown',
                payload,
            }
        },
    }

    protected _registerStep() {
        throw new WrongTimingError();
    }

    protected _enqueue(): Promise<WorkflowTask> {
        throw new WrongTimingError();
    }
}