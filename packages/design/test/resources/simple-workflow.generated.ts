/* This file is automatically generated. It gets overwritten on build */
import {CompleteWorkflow, WrongTimingError, WorkflowBase} from "@gamgee/run";
import {StateStore} from "@gamgee/interfaces/store";
import {WorkflowTask} from "@gamgee/interfaces/task";

import {MyTaskPayload} from "./simple-workflow";



export abstract class SimpleWorkflowBase extends WorkflowBase {
    protected constructor() {
        super('SimpleWorkflow');
        
        super._registerStep({ name: 'myTask', run: this.myTask, attempts: 1, backoffMs: 1000 });
    }
    
    async submit(payload: MyTaskPayload, store: StateStore, uniqueInstanceId?: string): Promise<string> {
        const task = await super._enqueue('myTask', payload, store, uniqueInstanceId);
        return task.instanceId;
    }

    abstract myTask(payload: MyTaskPayload): Promise<CompleteWorkflow>;    

    protected _registerStep() {
        throw new WrongTimingError();
    }
    
    protected _enqueue(): Promise<WorkflowTask> {
        throw new WrongTimingError();
    }
}